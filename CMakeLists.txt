cmake_minimum_required(VERSION 3.8)
file(READ "version" ver)
string(REGEX MATCH "VERSION_MAJOR ([0-9]*)" _ ${ver})
set(ver_major ${CMAKE_MATCH_1})
string(REGEX MATCH "VERSION_MINOR ([0-9]*)" _ ${ver})
set(ver_minor ${CMAKE_MATCH_1})
string(REGEX MATCH "VERSION_PATCH ([0-9]*)" _ ${ver})
set(ver_patch ${CMAKE_MATCH_1})
message("version: ${ver_major}.${ver_minor}.${ver_patch}")
project(zorm VERSION ${ver_major}.${ver_minor}.${ver_patch})

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# set(CMAKE_BUILD_TYPE Debug)  # Use `cmake -DCMAKE_BUILD_TYPE=Debug` more better
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
add_definitions(-DDM64)
if(MSVC)
    add_definitions(-D__MSVC__)
	string(APPEND CMAKE_CXX_FLAGS " /Zc:__cplusplus")
	add_compile_options(/wd26451 /wd26812 /wd4267)

    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
elseif(UNIX AND NOT APPLE)
    add_definitions(-D__LINUX__)
    find_package(Threads REQUIRED)
    set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g -O0")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0")

    set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -O2")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2")
endif()

add_definitions(-DZORM_LIB)
add_definitions(-DSQLITE_OMIT_TEMPDB)

include_directories(./thirds/sqlit3)
link_directories(./thirds/sqlit3/lib)
include_directories(./src/include)
include_directories(./thirds/zjson)
include_directories(./thirds/MySQL-C-Api-6.1/include)
if(MSVC)
    link_directories(./thirds/MySQL-C-Api-6.1/lib)
    include_directories(./thirds/pgsql/include)
    link_directories(./thirds/pgsql/lib)
    include_directories(./thirds/dm8/dpi/include)
    link_directories(./thirds/dm8/dpi)
    set(MysqlDll libmysql.dll)
    set(pqName libpq.dll)
    set(sqliteName sqlite3.dll)
    set(dm8Name dmdpi.dll)
elseif(APPLE)
    link_directories(./thirds/MySQL-C-Api-6.1/lib)
    include_directories(./thirds/pgsql/macos/include)
    link_directories(./thirds/pgsql/macos/lib)
    set(MysqlDll libmysqlclient.a)
    set(pqName libpq.a)
elseif(UNIX)
    include_directories(/usr/include/postgresql)
    include_directories(/opt/dm8/dpi/include)
    link_directories(/opt/dm8/dpi)
    set(MysqlDll mysqlclient)
    set(pthread pthread)
    set(pqName pq)
    set(sqliteName libsqlite3.so)
    set(dm8Name libdmdpi.so)
endif()

FILE(GLOB_RECURSE SRC_FILES "./src/*.cc") 
FILE(GLOB_RECURSE HEAD_FILES "./src/*.h") 

add_executable(${PROJECT_NAME} ${SRC_FILES} ${HEAD_FILES})
if(MSVC)
    target_link_libraries(${PROJECT_NAME} ${pthread} ${MysqlDll} ${pqName} ${sqliteName} ${dm8Name})
elseif(UNIX)
    target_link_libraries(${PROJECT_NAME} ${pthread} ${MysqlDll} ${pqName} ${sqliteName} ${dm8Name} dl)
endif()

set_target_properties(${PROJECT_NAME} PROPERTIES LINKER_LANGUAGE CXX)

##--------------------- Build unit tests -----------------------------------##
option(CMAKE_ZJSON_ENABLE_TEST "Whether to enable unit tests" OFF)
if (CMAKE_ZJSON_ENABLE_TEST)
    message(STATUS "Unit tests enabled")
    enable_testing()
    add_subdirectory(thirds/googletest-1.14.0 EXCLUDE_FROM_ALL)
    include_directories(thirds/googletest-1.14.0/googletest/include)

    add_executable(test_sqlite3 tests/test_sqlite3.cpp "./thirds/sqlit3/sqlite3.h")
    add_executable(test_mysql tests/test_mysql.cpp "./thirds/sqlit3/sqlite3.h")
    add_executable(test_postgres tests/test_postgres.cpp "./thirds/sqlit3/sqlite3.h")
    
    add_test(NAME test_sqlite3 COMMAND test_sqlite3)
    add_test(NAME test_mysql COMMAND test_mysql)
    add_test(NAME test_postgres COMMAND test_postgres)
    if(MSVC)
        target_link_libraries(test_sqlite3 gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} ${dm8Name})
        target_link_libraries(test_mysql gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} ${dm8Name})
        target_link_libraries(test_postgres gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} ${dm8Name})
    elseif(UNIX)
        target_link_libraries(test_sqlite3 gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} dl)
        target_link_libraries(test_mysql gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} dl)
        target_link_libraries(test_postgres gtest gtest_main ${pthread} ${MysqlDll} ${pqName} ${sqliteName} dl)
    endif()
endif()